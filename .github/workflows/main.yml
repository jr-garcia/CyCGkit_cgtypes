name: Build

on:
  push:
    branches: [ ci_test , build_wheels]
  pull_request:
    branches: [ master ]

env:
  VARSARG:  "x64"

jobs:
  Build-and-test:
    env:
      is_windows: ${{ contains(matrix.os, 'windows') }}
    strategy:
      fail-fast: false
      matrix:
        python-version:  ["3.10"] #[ 3.8, "3.10", "3.12", "pypy-3.7" ]
        os:  [ubuntu-latest] # [ windows-latest, ubuntu-latest, macos-11 ]
    runs-on: ${{ matrix.os }}
    if: ${{endsWith(github.ref,'ci_test') || endsWith(github.ref,'master')}}
    steps:
      - name: Determine separator
        uses: haya14busa/action-cond@v1
        id: sepdet
        with:
          cond: ${{ env.is_windows }}
          if_true: '\'
          if_false: '/'
      - name: Checkout repo
        uses: actions/checkout@v5
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ env.VARSARG }}
      - name: Update Pip
        run: python -m pip install --upgrade pip
#      - name: Install build deps on Windows  # prevent Cython (failing) compilation
#        if: env.is_windows  == 'true'
#        run: |
#          Remove-Item ${{ github.workspace }}\pyproject.toml
#          pip install numpy==2.2.6 setuptools wheel
#          pip install Cython==3.1.3 --install-option="--no-cython-compile"
      - name: Install project
        run: pip -v install ${{ github.workspace }}
      - name: Test
          run:  python -m unittest test_basic
          working-directory: ${{ github.workspace }}${{ steps.sepdet.outputs.value }}tests
      # - name: Test
      #   env:
      #     PYTHONPATH: ${{ github.workspace }}
      #   run: |
      #     pip install "numpy==2.2.6"
      #     cd ~
      #     pip list
      #     dir
      #     python -c "from cycgkit.cgtypes import vec3;print(f'{vec3}={vec3(1)}')"
      #     python -m unittest discover -f -s ${{ github.workspace }}${{ steps.sepdet.outputs.value }}tests

  Build-wheels:
    env:
      is_windows: ${{ contains(matrix.os, 'windows') }}
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]
    if: ${{ endsWith(github.ref,'build_wheels')}}
    steps:
      - name: Determine separator
        uses: haya14busa/action-cond@v1
        id: sepdet
        with:
          cond: ${{ env.is_windows }}
          if_true: '\'
          if_false: '/'
      - name: Checkout repo
        uses: actions/checkout@v5
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Update Pip
        run: python -m pip install --upgrade pip
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==3.1.4
      - name: Build wheels
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_I686_IMAGE: manylinux2014
          CIBW_MANYLINUX_PYPY_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_PYPY_I686_IMAGE: manylinux2014
          CIBW_ARCHS: auto64
          CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_*"
          CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-* pp38-* pp39-* pp38-*
          CIBW_TEST_COMMAND: "python -m unittest discover -f -s {project}${{ steps.sepdet.outputs.value }}tests"
        run: python -m cibuildwheel --output-dir wheelhouse
      - uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}${{ steps.sepdet.outputs.value }}wheelhouse${{ steps.sepdet.outputs.value }}*.whl

  Build_sdist:
    needs: Build-wheels
    name: Build source distribution
    runs-on: ubuntu-latest
    if: ${{ endsWith(github.ref,'build_wheels')}}
    steps:
      - uses: actions/checkout@v5
      - name: Build sdist
        run: pipx run build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: Save sdist
          path: ${{ github.workspace }}/dist/*.tar.gz

  Pypi-upload:
    name: Upload release to PyPI
    needs: [ Build-wheels, Build_sdist ]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    #    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    environment:
      name: testpypi
      url: https://pypi.org/p/CyCGkit_cgtypes
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v5
        with:
          name: artifact
          path: ${{ github.workspace }}/dist
#      - name: Publish package distributions to PyPI
#        uses: pypa/gh-action-pypi-publish@v1.4.2
      - name: Publish package distributions to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1.4.2
        with:
          repository-url: https://test.pypi.org/legacy/
